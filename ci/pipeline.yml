# generated by https://github.com/optiopay/infrastructure/tree/master/dockerfiles/concourse-generate-pipeline; DO NOT EDIT
#
# When this pipeline config is loaded into Concourse, it has the followig automagic properties:
#
# * Concourse automatically re-generates this file then commits and opens a new
#   GitHub pull request when a new version of the
#   `concourse-generate-pipeline:latest` docker image is detected. (Merging
#   that pull request will in turn trigger the next step, ie. loading it to
#   Concourse.) This behavior can be disabled by removing this banner of
#   comment from this file.
#
# * Concourse automatically deploys (loads) new versions of this pipeline when
#   they're merged to `master`.
#
# If you have to manually deploy this pipeline config to Concourse, run this command:
#   .../infrastructure/bin/concourse-set-pipeline
---
resource_types:

  - name: docker-image
    type: docker-image
    privileged: true
    source:
      repository: concourse/docker-image-resource
      tag: latest

  - name: git
    type: docker-image
    source:
      repository: concourse/git-resource
      tag: latest


  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
      tag: latest

  - name: concourse-metadata
    type: docker-image
    source:
      repository: swce/metadata-resource
      tag: latest

  - name: github-webhook
    type: docker-image
    source:
      repository: eu.gcr.io/optiopay/concourse-github-webhook-resource
      tag: latest
      username: ((gcr-username))
      password: ((gcr-password))

resources:

  - name: repository
    type: git
    source:
      uri: git@github.com:optiopay/webhook-broadcaster.git
      branch: master
      private_key: ((github-optiobot-private-key))
      git_config:
        - name: "url.git@github.com:.insteadof"
          value: "https://github.com/"
      ignore_paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))

  - name: docker-image
    type: docker-image
    check_every: 8760h
    source:
      repository: eu.gcr.io/optiopay/webhook-broadcaster
      username: ((gcr-username))
      password: ((gcr-password))


  - name: pull-request
    type: pull-request
    source:
      access_token: ((github-optiobot-access-token))
      repository: optiopay/webhook-broadcaster
      ignore_paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))

  - name: concourse-metadata
    type: concourse-metadata
    check_every: 8760h

  - name: concourse-generate-pipeline-dockerimage
    type: docker-image
    check_every: 1h
    source:
      repository: eu.gcr.io/optiopay/concourse-generate-pipeline
      tag: latest
      username: ((gcr-username))
      password: ((gcr-password))

  - name: concourse-pipeline-config
    type: git
    check_every: 1h
    source:
      uri: git@github.com:optiopay/webhook-broadcaster.git
      branch: master
      private_key: ((github-optiobot-private-key))
      git_config:
        - name: "url.git@github.com:.insteadof"
          value: "https://github.com/"
      paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))


  - name: pull-request-concourse-pipeline-config
    type: pull-request
    source:
      access_token: ((github-optiobot-access-token))
      repository: optiopay/webhook-broadcaster
      paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))

  - name: concourse-pipeline-tool
    type: git
    check_every: 8760h
    source:
      uri: git@github.com:optiopay/infrastructure.git
      branch: master
      private_key: ((github-optiobot-private-key))
      git_config:
        - name: "url.git@github.com:.insteadof"
          value: "https://github.com/"
      paths:
        - bin/concourse-set-pipeline

  - name: concourse-github-webhook
    type: github-webhook
    check_every: 8760h
    source:
      repo: optiopay/webhook-broadcaster
      access_token: ((github-optiobot-access-token))
      # use the same token for all resources
      webhook_token: ((concourse-webhook-token))

jobs:

- name: master-build
  plan:

  - get: repository
    trigger: true
    params:
      depth: 1
    attempts: 0
    timeout: 1h
  - task: extract-tags
    config:
      inputs:
        - name: git-repo
      outputs:
        - name: tags
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/optiopay/concourse-docker-tags
          tag: latest
          username: ((gcr-username))
          password: ((gcr-password))
      run:
        path: /concourse-docker-tags
        args:
          - --input
          - git-repo
          - --output
          - tags
          - --additional-tags
          - latest
    attempts: 0
    timeout: 1h
    input_mapping:
      git-repo: repository

  - put: docker-image
    params:
      build: repository
      tag: tags/main
      additional_tags: tags/tags
      build_args_file: tags/build_args
    get_params:
      skip_download: true
    attempts: 0
    timeout: 1h

- name: pull-request-build
  build_logs_to_retain: 50
  on_success:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: success
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  on_failure:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: failure
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  on_abort:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: failure
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  plan:

  - get: pull-request
    trigger: true
    version: every
    attempts: 0
    timeout: 1h

  - put: pull-request
    params:
      path: pull-request
      status: pending
      context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
    attempts: 0
    timeout: 1h

  - aggregate:


    - task: extract-tags
      config:
        inputs:
          - name: git-repo
        outputs:
          - name: tags
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: eu.gcr.io/optiopay/concourse-docker-tags
            tag: latest
            username: ((gcr-username))
            password: ((gcr-password))
        run:
          path: /concourse-docker-tags
          args:
            - --input
            - git-repo
            - --output
            - tags
            - --tag-suffix
            - pr
      attempts: 0
      timeout: 1h
      input_mapping:
        git-repo: pull-request

  - aggregate:


    - put: docker-image
      params:
        build: pull-request
        tag: tags/main
        additional_tags: tags/tags
        build_args_file: tags/build_args
      get_params:
        skip_download: true
      attempts: 0
      timeout: 1h

- name: generate-concourse-pipeline
  build_logs_to_retain: 50
  plan:

  - aggregate:

    - get: concourse-generate-pipeline-dockerimage
      trigger: true
      params:
        skip_download: true
      attempts: 0
      timeout: 1h

    - get: concourse-pipeline-config
      trigger: true
      params:
        # it's the infrastructure repo and there's a path filter, so very likely
        # there are other commits on top
        depth: 200
      attempts: 0
      timeout: 1h

    - get: concourse-metadata
      attempts: 0
      timeout: 1h

  - task: generate-concourse-pipeline
    config:
      inputs:
        - name: concourse-pipeline-config
      outputs:
        - name: generated-pipeline
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/optiopay/concourse-generate-pipeline
          tag: latest
          username: ((gcr-username))
          password: ((gcr-password))
      run:
        path: /bin/sh
        args:
          - -euc
          - |
            pipeline_file="$PWD/generated-pipeline/pipeline.yml"
            generator_version_file="$PWD/generated-pipeline/generator-version.txt"

            cd "concourse-pipeline-config"

            # allow opting out from auto-generating the pipeline by removing
            # the banner that warns that the file is generated
            if ! grep -q '^[[:blank:]]*#.*generated by .* DO NOT EDIT' ci/pipeline.yml; then
              echo "No banner found at the beginning of 'ci/pipeline.yml', will not re-generate it."
              exit 0
            fi

            echo "Generating 'ci/pipeline.yml'..."
            /concourse-generate-pipeline -o "$pipeline_file"

            echo "Storing version of the generator script in a file..."
            /concourse-generate-pipeline --version >"$generator_version_file"
    attempts: 0
    timeout: 1h

  - task: create-pull-request
    config:
      inputs:
        - name: generated-pipeline
        - name: concourse-metadata
        - name: concourse-pipeline-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/optiopay/github-hub
          tag: latest
          username: ((gcr-username))
          password: ((gcr-password))
      run:
        path: /bin/bash
        args:
          - -euo
          - pipefail
          - -c
          - |
            pipeline_file="$PWD/generated-pipeline/pipeline.yml"

            generator_version="$(< generated-pipeline/generator-version.txt)"

            echo "Markdown snippet for the CI badge - you can use it in the README.md:"
            echo "  [![build status]($(<concourse-metadata/atc-external-url)/api/v1/teams/$(<concourse-metadata/build-team-name)/pipelines/$(<concourse-metadata/build-pipeline-name)/jobs/master-build/badge)]($(<concourse-metadata/atc-external-url)/teams/$(<concourse-metadata/build-team-name)/pipelines/$(<concourse-metadata/build-pipeline-name)/jobs/master-build)"
            echo ""

            #TODO use the shorter form once https://github.com/SWCE/metadata-resource/pull/3 gets merged
            #build_url="$(< concourse-metadata/build-url)"
            build_url="$(< concourse-metadata/atc-external-url)/teams/$(< concourse-metadata/build-team-name)/pipelines/$(< concourse-metadata/build-pipeline-name)/jobs/$(< concourse-metadata/build-job-name)/builds/$(< concourse-metadata/build-name)"

            if [ ! -f "$pipeline_file" ]; then
              echo "No pipeline file was generated in the previous step(s)."
              echo "Nothing to do."

              exit 0
            fi

            cd "concourse-pipeline-config"

            echo "Creating a new Git branch..."
            subdir=""
            git checkout -b "ci/auto-update-concourse-pipeline-${subdir:+${subdir//[^A-Za-z0-9_]/-}-}${generator_version}-$(date +%s)" master

            echo "Adding the generated 'ci/pipeline.yml' to the Git index..."
            cat "$pipeline_file" > ci/pipeline.yml
            git add ci/pipeline.yml

            if git diff-index --quiet --cached HEAD; then
              echo "The freshly generated 'ci/pipeline.yml' is identical to the version that is already in 'master'."
              echo "Nothing to do."

              exit 0
            fi

            echo "Committing the changes to Git..."
            pull_request_message="${subdir:-CI}: update pipeline using the latest template"$'\n\n'"The pipeline was re-generated using concourse-generate-pipeline version ${generator_version}."$'\n'"Concourse build: $build_url"
            git commit --message "$pull_request_message"

            echo "Pushing the Git commit and creating the PR..."
            hub pull-request --push --reviewer='@optiopay/infrastructure' --message="$pull_request_message"
      params:
        GITHUB_TOKEN: ((github-optiobot-access-token))
        SSH_PRIVATE_KEY: ((github-optiobot-private-key))
        GIT_AUTHOR_NAME: Concourse CI
        GIT_COMMITTER_NAME: Concourse CI
    attempts: 0
    timeout: 1h

- name: pull-request-test-concourse-pipeline
  build_logs_to_retain: 50
  on_success:
    do:
      - put: pull-request-concourse-pipeline-config
        params:
          path: pull-request-concourse-pipeline-config
          status: success
          context: $BUILD_PIPELINE_NAME/pull-request-build
        attempts: 0
        timeout: 1h
  on_failure:
    do:
      - put: pull-request-concourse-pipeline-config
        params:
          path: pull-request-concourse-pipeline-config
          status: failure
          context: $BUILD_PIPELINE_NAME/pull-request-build
        attempts: 0
        timeout: 1h
  on_abort:
    do:
      - put: pull-request-concourse-pipeline-config
        params:
          path: pull-request-concourse-pipeline-config
          status: failure
          context: $BUILD_PIPELINE_NAME/pull-request-build
        attempts: 0
        timeout: 1h
  plan:

  - aggregate:

    - do:

      - get: pull-request-concourse-pipeline-config
        trigger: true
        version: every
        attempts: 0
        timeout: 1h

      - put: pull-request-concourse-pipeline-config
        params:
          path: pull-request-concourse-pipeline-config
          status: pending
          context: $BUILD_PIPELINE_NAME/pull-request-build
        attempts: 0
        timeout: 1h

    - get: concourse-pipeline-tool
      params:
        # it's the infrastructure repo and there's a path filter, so very likely
        # there are other commits on top
        depth: 200
      attempts: 0
      timeout: 1h

    - get: concourse-metadata
      attempts: 0
      timeout: 1h

  - task: set-concourse-pipeline
    config:
      inputs:
        - name: concourse-pipeline-tool
        - name: concourse-pipeline-config
        - name: concourse-metadata
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/optiopay/toolbox
          tag: latest
          username: ((gcr-username))
          password: ((gcr-password))
      run:
        path: /bin/sh
        args:
          - -euc
          - |
            concourse-pipeline-tool/bin/concourse-set-pipeline \
              --dry-run \
              --config \
              concourse-pipeline-config/ci/pipeline.yml \
              --team-name="$(cat concourse-metadata/build-team-name)"
      params:
        USERNAME: ((concourse-basic-auth-username))
        PASSWORD: ((concourse-basic-auth-password))
    attempts: 0
    timeout: 1h
    input_mapping:
      concourse-pipeline-config: pull-request-concourse-pipeline-config

- name: set-concourse-pipeline
  build_logs_to_retain: 50
  plan:

  - aggregate:

    - get: concourse-pipeline-config
      trigger: true
      params:
        depth: 1
      attempts: 0
      timeout: 1h

    - get: concourse-pipeline-tool
      params:
        # it's the infrastructure repo and there's a path filter, so very likely
        # there are other commits on top
        depth: 200
      attempts: 0
      timeout: 1h

    - get: concourse-metadata
      attempts: 0
      timeout: 1h

  - aggregate:

    - task: set-concourse-pipeline
      config:
        inputs:
          - name: concourse-pipeline-tool
          - name: concourse-pipeline-config
          - name: concourse-metadata
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: eu.gcr.io/optiopay/toolbox
            tag: latest
            username: ((gcr-username))
            password: ((gcr-password))
        run:
          path: /bin/sh
          args:
            - -euc
            - |
              concourse-pipeline-tool/bin/concourse-set-pipeline \
                --non-interactive \
                --config \
                concourse-pipeline-config/ci/pipeline.yml \
                --team-name="$(cat concourse-metadata/build-team-name)"
        params:
          USERNAME: ((concourse-basic-auth-username))
          PASSWORD: ((concourse-basic-auth-password))
      attempts: 0
      timeout: 1h

    - put: concourse-github-webhook
      params:
        webhooks:
          - resource: pull-request
            events:
              - pull_request
          - resource: repository
            events:
              - push
      get_params:
        skip_download: true
      attempts: 0
      timeout: 1h


