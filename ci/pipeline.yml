# generated by https://github.com/optiopay/infrastructure/tree/master/dockerfiles/concourse-generate-pipeline; DO NOT EDIT
#
# When this pipeline config is loaded into Concourse, it has the followig automagic properties:
#
# * Concourse automatically re-generates this file then commits and opens a new
#   GitHub pull request when a new version of the
#   `concourse-generate-pipeline:latest` docker image is detected. (Merging
#   that pull request will in turn trigger the next step, ie. loading it to
#   Concourse.) This behavior can be disabled by removing this banner of
#   comment from this file.
#
# * Concourse automatically deploys (loads) new versions of this pipeline when
#   they're merged to `master`.
#
# If you have to manually deploy this pipeline config to Concourse, run this command:
#   .../infrastructure/bin/concourse-set-pipeline
---
resource_types:

  - name: docker-image
    type: docker-image
    privileged: true
    source:
      repository: concourse/docker-image-resource
      tag: latest

  - name: git
    type: docker-image
    source:
      repository: concourse/git-resource
      tag: latest


  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
      tag: latest

  - name: helm
    type: docker-image
    source:
      repository: linkyard/concourse-helm-resource
      tag: '2.12.2'

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

  - name: github-webhook
    type: docker-image
    source:
      repository: eu.gcr.io/optiopay/concourse-github-webhook-resource
      tag: latest
      username: ((gcr-username))
      password: ((gcr-password))

resources:

  - name: repository
    type: git
    source:
      uri: git@github.com:optiopay/webhook-broadcaster.git
      branch: master
      private_key: ((github-optiobot-private-key))
      git_config:
        - name: "url.git@github.com:.insteadof"
          value: "https://github.com/"
      ignore_paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))

  - name: docker-image
    type: docker-image
    check_every: 8760h
    source:
      repository: eu.gcr.io/optiopay/webhook-broadcaster
      username: ((gcr-username))
      password: ((gcr-password))

  - name: config
    type: git
    source:
      uri: git@github.com:optiopay/infrastructure.git
      branch: master
      private_key: ((github-optiobot-private-key))
      git_config:
        - name: "url.git@github.com:.insteadof"
          value: "https://github.com/"
      paths:
        - 'environments/kubernetes/namespaces/ci/webhook-broadcaster-*'

  - name: helm
    type: helm
    check_every: 8760h
    source:
      cluster_url: ((k8s-gpp-prod-cluster-url))
      cluster_ca: ((k8s-gpp-prod-cluster-ca))
      token: ((k8s-gpp-prod-kube-system-kube-token))
      tiller_namespace: kube-system
      namespace: ci
      release: webhook-broadcaster

  - name: pull-request
    type: pull-request
    source:
      access_token: ((github-optiobot-access-token))
      repository: optiopay/webhook-broadcaster
      ignore_paths:
        - ci/pipeline.yml
        - ci/pipeline-generator.yml
        - ci/pipeline-metadata.json
    webhook_token: ((concourse-webhook-token))

  - name: slack-notification
    type: slack-notification
    check_every: 8760h
    source:
      url: ((slack-notifications-webhook))

  - name: concourse-github-webhook
    type: github-webhook
    check_every: 8760h
    source:
      repo: optiopay/webhook-broadcaster
      access_token: ((github-optiobot-access-token))
      # use the same token for all resources
      webhook_token: ((concourse-webhook-token))

jobs:

- name: master-build
  plan:

  - get: repository
    trigger: true
    params:
      depth: 1
    attempts: 0
    timeout: 1h
  - task: extract-tags
    config:
      inputs:
        - name: git-repo
      outputs:
        - name: tags
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: eu.gcr.io/optiopay/concourse-docker-tags
          tag: latest
          username: ((gcr-username))
          password: ((gcr-password))
      run:
        path: /concourse-docker-tags
        args:
          - --input
          - git-repo
          - --output
          - tags
          - --additional-tags
          - latest
    attempts: 0
    timeout: 1h
    input_mapping:
      git-repo: repository

  - put: docker-image
    params:
      build: repository
      tag: tags/main
      additional_tags: tags/tags
      build_args_file: tags/build_args
    get_params:
      skip_download: true
    attempts: 0
    timeout: 1h

- name: deploy
  build_logs_to_retain: 50
  on_success:
    do:
      - put: slack-notification
        params:
          channel: "#ops"
          text_file: slack-messages/success
          attachments_file: slack-messages/actions
        attempts: 0
        timeout: 1h
  on_failure:
    do:
      - put: slack-notification
        params:
          channel: "#ops"
          text_file: slack-messages/failure
          attachments_file: slack-messages/actions
        attempts: 0
        timeout: 1h
  plan:

  - aggregate:

    - get: repository
      passed: [ master-build ]
      trigger: true
      params:
        depth: 1
      attempts: 0
      timeout: 1h

    - get: config
      trigger: true
      params:
        # it's the infrastructure repo and there's a path filter, so very likely
        # there are other commits on top
        depth: 200
      attempts: 0
      timeout: 1h

  - aggregate:

    - do:

      - task: extract-tags
        config:
          inputs:
            - name: git-repo
          outputs:
            - name: tags
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: eu.gcr.io/optiopay/concourse-docker-tags
              tag: latest
              username: ((gcr-username))
              password: ((gcr-password))
          run:
            path: /concourse-docker-tags
            args:
              - --input
              - git-repo
              - --output
              - tags
        attempts: 0
        timeout: 1h
        input_mapping:
          git-repo: repository

      - task: prepare-slack-messages
        config:
          inputs:
            - name: tags
          outputs:
            - name: slack-messages
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: eu.gcr.io/optiopay/concourse-slack-message
              tag: latest
              username: ((gcr-username))
              password: ((gcr-password))
          run:
            path: /concourse-slack-message
            args:
              - --input
              - tags
              - --output
              - slack-messages
              - --environment
              - ci
              - --project-name
              - webhook-broadcaster
              - --webapp-url-file
              - config/environments/kubernetes/namespaces/ci/webhook-broadcaster-webapp-url.txt
        attempts: 0
        timeout: 1h

    - task: decrypt-secrets
      config:
        inputs:
          - name: config
        outputs:
          - name: decrypted-config
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: eu.gcr.io/optiopay/secrets
            tag: latest
            username: ((gcr-username))
            password: ((gcr-password))
        params:
          PRIVATE_KEY: ((secrets-private-key))
          SOPS_CONF_DIR: config
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              /crypt -d config/environments/kubernetes/namespaces/ci/webhook-broadcaster-secrets.yml
              mv config/environments/kubernetes/namespaces/ci/webhook-broadcaster-* decrypted-config
      attempts: 0
      timeout: 1h

  - put: helm
    params:
      # check that the deployment was deployed correctly
      # abort after 120 seconds if it didn't
      wait_until_ready: 120
      chart: repository/helm/webhook-broadcaster
      replace: true
      force: true
      override_values:
         # Helm release has the branch name
        - key: image.tag
          path: tags/main
          type: string
      values:
        - 'decrypted-config/webhook-broadcaster-values.yml'
        - 'decrypted-config/webhook-broadcaster-secrets.yml'
    attempts: 0
    timeout: 1h

- name: pull-request-build
  build_logs_to_retain: 50
  on_success:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: success
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  on_failure:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: failure
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  on_abort:
    do:
      - put: pull-request
        params:
          path: pull-request
          status: failure
          context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
        attempts: 0
        timeout: 1h
  plan:

  - get: pull-request
    trigger: true
    version: every
    attempts: 0
    timeout: 1h

  - put: pull-request
    params:
      path: pull-request
      status: pending
      context: $BUILD_PIPELINE_NAME/$BUILD_JOB_NAME
    attempts: 0
    timeout: 1h

  - aggregate:


    - task: extract-tags
      config:
        inputs:
          - name: git-repo
        outputs:
          - name: tags
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: eu.gcr.io/optiopay/concourse-docker-tags
            tag: latest
            username: ((gcr-username))
            password: ((gcr-password))
        run:
          path: /concourse-docker-tags
          args:
            - --input
            - git-repo
            - --output
            - tags
            - --tag-suffix
            - pr
      attempts: 0
      timeout: 1h
      input_mapping:
        git-repo: pull-request

  - aggregate:


    - put: docker-image
      params:
        build: pull-request
        tag: tags/main
        additional_tags: tags/tags
        build_args_file: tags/build_args
      get_params:
        skip_download: true
      attempts: 0
      timeout: 1h
